{"version":3,"file":"pages/index.js","sources":["webpack:///./pages/index.vue","webpack:///./node_modules/vue-clickaway/index.js","webpack:///./node_modules/vue-context/src/js/utils.js","webpack:///./node_modules/vue-context/src/js/normalize-slot.js","webpack:///./node_modules/vue-context/src/js/vue-context.js","webpack:///./pages/index.vue?06d9","webpack:///./pages/index.vue?b7d3"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_vm._ssrNode(\"<p>\\n        Right click on me\\n    </p> <br><br> <button type=\\\"button\\\">Right click on me 2</button> \"),_c('vue-context',{ref:\"menu\"},[_c('li',[_c('a',{on:{\"click\":function($event){$event.preventDefault();return _vm.onClick($event.target.innerText)}}},[_vm._v(\"\\n                Option 1\\n            \")])]),_vm._v(\" \"),_c('li',[_c('a',{on:{\"click\":function($event){$event.preventDefault();return _vm.onClick($event.target.innerText)}}},[_vm._v(\"\\n                Option 2\\n            \")])])])],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Vue from 'vue';\r\n\r\nexport var version = '2.2.2';\r\n\r\nvar compatible = (/^2\\./).test(Vue.version);\r\nif (!compatible) {\r\n  Vue.util.warn('VueClickaway ' + version + ' only supports Vue 2.x, and does not support Vue ' + Vue.version);\r\n}\r\n\r\n\r\n\r\n// @SECTION: implementation\r\n\r\nvar HANDLER = '_vue_clickaway_handler';\r\n\r\nfunction bind(el, binding, vnode) {\r\n  unbind(el);\r\n\r\n  var vm = vnode.context;\r\n\r\n  var callback = binding.value;\r\n  if (typeof callback !== 'function') {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      Vue.util.warn(\r\n        'v-' + binding.name + '=\"' +\r\n        binding.expression + '\" expects a function value, ' +\r\n        'got ' + callback\r\n      );\r\n    }\r\n    return;\r\n  }\r\n\r\n  // @NOTE: Vue binds directives in microtasks, while UI events are dispatched\r\n  //        in macrotasks. This causes the listener to be set up before\r\n  //        the \"origin\" click event (the event that lead to the binding of\r\n  //        the directive) arrives at the document root. To work around that,\r\n  //        we ignore events until the end of the \"initial\" macrotask.\r\n  // @REFERENCE: https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n  // @REFERENCE: https://github.com/simplesmiler/vue-clickaway/issues/8\r\n  var initialMacrotaskEnded = false;\r\n  setTimeout(function() {\r\n    initialMacrotaskEnded = true;\r\n  }, 0);\r\n\r\n  el[HANDLER] = function(ev) {\r\n    // @NOTE: this test used to be just `el.containts`, but working with path is better,\r\n    //        because it tests whether the element was there at the time of\r\n    //        the click, not whether it is there now, that the event has arrived\r\n    //        to the top.\r\n    // @NOTE: `.path` is non-standard, the standard way is `.composedPath()`\r\n    var path = ev.path || (ev.composedPath ? ev.composedPath() : undefined);\r\n    if (initialMacrotaskEnded && (path ? path.indexOf(el) < 0 : !el.contains(ev.target))) {\r\n      return callback.call(vm, ev);\r\n    }\r\n  };\r\n\r\n  document.documentElement.addEventListener('click', el[HANDLER], false);\r\n}\r\n\r\nfunction unbind(el) {\r\n  document.documentElement.removeEventListener('click', el[HANDLER], false);\r\n  delete el[HANDLER];\r\n}\r\n\r\nexport var directive = {\r\n  bind: bind,\r\n  update: function(el, binding) {\r\n    if (binding.value === binding.oldValue) return;\r\n    bind(el, binding);\r\n  },\r\n  unbind: unbind,\r\n};\r\n\r\nexport var mixin = {\r\n  directives: { onClickaway: directive },\r\n};\r\n","if (! Array.from) {\n    Array.from = object => {\n        'use strict';\n\n        return [].slice.call(object);\n    };\n}\n\nif (! Array.isArray) {\n    Array.isArray = arg => Object.prototype.toString.call(arg) === '[object Array]';\n}\n\n// --- Constants ---\nconst arrayFrom = Array.from;\n\nexport const isArray = Array.isArray;\n\nexport const keyCodes = {\n    ESC: 27,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n};\n\n// --- Dom Utils ---\n\n// Returns true if the parent element contains the child element\nconst contains = (parent, child) => {\n    if (! parent || typeof parent.contains !== 'function') {\n        return false;\n    }\n\n    return parent.contains(child);\n};\n\n// Attach an event listener to an element\nexport const eventOn = (el, eventName, handler) => {\n    if (el && el.addEventListener) {\n        el.addEventListener(eventName, handler);\n    }\n};\n\n// Remove an event listener from an element\nexport const eventOff = (el, eventName, handler) => {\n    if (el && el.removeEventListener) {\n        el.removeEventListener(eventName, handler);\n    }\n};\n\n// Filter visible elements\nexport const filterVisible = elements => (elements || []).filter(isVisible);\n\n// Return the Bounding Client Rect of an element\n// Returns `null` if not an element\nexport const getBCR = el => (isElement(el) ? el.getBoundingClientRect() : null);\n\n// Determine if an element is an HTML element\nconst isElement = el => Boolean(el && el.nodeType === Node.ELEMENT_NODE);\n\n// Determine if an HTML element is visible - Faster than CSS check\nconst isVisible = el => {\n    if (! isElement(el) || ! contains(document.body, el)) {\n        return false;\n    }\n\n    if (el.style.display === 'none') {\n        return false;\n    }\n\n    const bcr = getBCR(el);\n\n    return Boolean(bcr && bcr.height > 0 && bcr.width > 0);\n};\n\n// Select all elements matching a selector. Returns `[]` if none found\nexport const selectAll = (selector, root) =>\n    arrayFrom((isElement(root) ? root : document).querySelectorAll(selector));\n\n// Set an attribute on an element\nexport const setAttr = (el, attr, value) => {\n    if (attr && isElement(el)) {\n        el.setAttribute(attr, value);\n    }\n};\n\nexport const parentElementByClassName = (element, className) => {\n    let parentElement = element.parentElement;\n\n    while (parentElement !== null && !parentElement.classList.contains(className)) {\n        parentElement = parentElement.parentElement;\n    }\n\n    return parentElement;\n};\n","export const normalizeSlot = (name, scope = {}, $scopedSlots = {}, $slots = {}) => {\n    // Note: in Vue 2.6.x, all named slots are also scoped slots\n    const slot = $scopedSlots[name] || $slots[name];\n\n    return typeof slot === 'function' ? slot(scope) : slot;\n};\n","import { directive as onClickaway } from 'vue-clickaway/index';\nimport {\n    eventOff,\n    eventOn,\n    filterVisible,\n    isArray,\n    keyCodes,\n    selectAll,\n    setAttr,\n    getBCR,\n    parentElementByClassName\n} from './utils';\nimport { normalizeSlot } from './normalize-slot';\n\nexport default {\n    directives: {\n        onClickaway\n    },\n\n    props: {\n        closeOnClick: {\n            type: Boolean,\n            default: true\n        },\n        closeOnScroll: {\n            type: Boolean,\n            default: true\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        itemSelector: {\n            type: [String, Array],\n            default: () => ['.v-context-item', '.v-context > li > a']\n        },\n        role: {\n            type: String,\n            default: 'menu'\n        },\n        subMenuOffset: {\n            type: Number,\n            default: 10\n        },\n        useScrollHeight: {\n            type: Boolean,\n            default: false\n        },\n        useScrollWidth: {\n            type: Boolean,\n            default: false\n        },\n        heightOffset: {\n            type: Number,\n            default: 25\n        },\n        widthOffset: {\n            type: Number,\n            default: 25\n        },\n        tag: {\n            type: String,\n            default: 'ul'\n        }\n    },\n\n    computed: {\n        style() {\n            return this.show\n                ? { top: `${this.top}px`, left: `${this.left}px` }\n                : null;\n        }\n    },\n\n    data() {\n        return {\n            top: null,\n            left: null,\n            show: false,\n            data: null,\n            localItemSelector: '',\n            activeSubMenu: null\n        };\n    },\n\n    created() {\n        this.localItemSelector = this.mapItemSelector(this.itemSelector);\n    },\n\n    beforeDestroy() {\n        if (this.closeOnScroll) {\n            this.removeScrollEventListener();\n        }\n    },\n\n    methods: {\n        addScrollEventListener() {\n            eventOn(window, 'scroll', this.close);\n        },\n\n        addHoverEventListener(element) {\n            element.querySelectorAll('.v-context__sub').forEach(\n                subMenuNode => {\n                    eventOn(subMenuNode, 'mouseenter', this.openSubMenu);\n                    eventOn(subMenuNode, 'mouseleave', this.closeSubMenu);\n                }\n            );\n        },\n\n        close() {\n            if (! this.show) {\n                return;\n            }\n\n            // make sure all sub menus are closed\n            while (this.activeSubMenu !== null) {\n                parentElementByClassName(this.activeSubMenu, 'v-context__sub').dispatchEvent(new Event('mouseleave'));\n            }\n\n            this.resetData();\n            this.removeHoverEventListener(this.$el);\n\n            if (this.closeOnScroll) {\n                this.removeScrollEventListener();\n            }\n\n            this.$emit('close');\n        },\n\n        focusItem(index, items) {\n            const el = items.find((el, idx) => idx === index);\n            el && el.focus();\n        },\n\n        focusNext(event, up) {\n            if (! this.show) {\n                return;\n            }\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.$nextTick(() => {\n                const items = this.getItems();\n                if (items.length < 1) {\n                    return;\n                }\n\n                let index = items.indexOf(event.target);\n                if (up && index > 0) {\n                    index--;\n                } else if (! up && index < items.length - 1) {\n                    index++;\n                }\n\n                if (index < 0) {\n                    index = 0;\n                }\n\n                this.focusItem(index, items);\n            });\n        },\n\n        getItems() {\n            // if a sub menu is active only return the elements of the sub menu to keep the scope\n            return filterVisible(selectAll(this.localItemSelector, this.activeSubMenu || this.$el));\n        },\n\n        mapItemSelector(itemSelector) {\n            if (isArray(itemSelector)) {\n                itemSelector = itemSelector\n                    .map(selector => `${selector}:not(.disabled):not([disabled])`)\n                    .join(', ');\n            }\n\n            return itemSelector;\n        },\n\n        onClick() {\n            this.close();\n        },\n\n        onKeydown(event) {\n            const key = event.keyCode;\n\n            if (key === keyCodes.ESC) {\n                // Close on esc\n                this.close();\n            } else if (key === keyCodes.DOWN) {\n                // Down arrow\n                this.focusNext(event, false);\n            } else if (key === keyCodes.UP) {\n                // Up arrow\n                this.focusNext(event, true);\n            } else if (key === keyCodes.RIGHT) {\n                // check if a parent element which is associated with a sub menu can be found.\n                const menuContainer = parentElementByClassName(event.target, 'v-context__sub');\n\n                // try to open a sub menu if the sub menu isn't the current sub menu\n                if (menuContainer && menuContainer.getElementsByClassName('v-context')[0] !== this.activeSubMenu) {\n                    menuContainer.dispatchEvent(new Event('mouseenter'));\n                    this.focusNext(event, false);\n                }\n            } else if (key === keyCodes.LEFT) {\n                if (!this.activeSubMenu) {\n                    return;\n                }\n\n                const parentMenu = parentElementByClassName(this.activeSubMenu, 'v-context__sub');\n                parentMenu.dispatchEvent(new Event('mouseleave'));\n\n                const items = this.getItems(),\n                      index = items.indexOf(parentMenu.getElementsByTagName('a')[0]);\n\n                this.focusItem(index, items);\n            }\n        },\n\n        open(event, data) {\n            this.data = data;\n            this.show = true;\n\n            this.$nextTick(() => {\n                [this.top, this.left] = this.positionMenu(event.clientY, event.clientX, this.$el);\n\n                this.$el.focus();\n                this.setItemRoles();\n                this.addHoverEventListener(this.$el);\n\n                if (this.closeOnScroll) {\n                    this.addScrollEventListener();\n                }\n\n                this.$emit('open', event, this.data, this.top, this.left);\n            });\n        },\n\n        openSubMenu(event) {\n            const subMenuElement = this.getSubMenuElementByEvent(event),\n                  parentMenu = parentElementByClassName(subMenuElement.parentElement, 'v-context'),\n                  bcr = getBCR(event.target);\n\n            // check if another sub menu is open. In this case make sure no other as well as no nested sub menu is open\n            if (this.activeSubMenu !== parentMenu) {\n                while (this.activeSubMenu !== null\n                    && this.activeSubMenu !== parentMenu\n                    && this.activeSubMenu !== subMenuElement\n                ) {\n                    parentElementByClassName(this.activeSubMenu, 'v-context__sub')\n                        .dispatchEvent(new Event('mouseleave'));\n                }\n            }\n\n            // first set the display and afterwards execute position calculation for correct element offsets\n            subMenuElement.style.display = 'block';\n\n            let [elementTop, elementLeft] = this.positionMenu(bcr.top, bcr.right - this.subMenuOffset, subMenuElement);\n\n            subMenuElement.style.left = `${elementLeft}px`;\n            subMenuElement.style.top = `${elementTop}px`;\n\n            this.activeSubMenu = subMenuElement;\n        },\n\n        closeSubMenu(event) {\n            const subMenuElement = this.getSubMenuElementByEvent(event),\n                  parentMenu = parentElementByClassName(subMenuElement, 'v-context');\n\n            // if a sub menu is closed and it's not the currently active sub menu (eg. a lowe layered sub menu closed\n            // by a mouseleave event) close all nested sub menus\n            if (this.activeSubMenu !== subMenuElement) {\n                while (this.activeSubMenu !== null && this.activeSubMenu !== subMenuElement) {\n                    parentElementByClassName(this.activeSubMenu, 'v-context__sub')\n                        .dispatchEvent(new Event('mouseleave'));\n                }\n            }\n\n            subMenuElement.style.display = 'none';\n\n            // check if a parent menu exists and the parent menu is a sub menu to keep track of the correct sub menu\n            this.activeSubMenu = parentMenu && parentElementByClassName(parentMenu, 'v-context__sub')\n                ? parentMenu\n                : null;\n        },\n\n        getSubMenuElementByEvent (event) {\n            return event.target.getElementsByTagName('ul')[0];\n        },\n\n        positionMenu(top, left, element) {\n            const elementHeight = this.useScrollHeight ? element.scrollHeight : element.offsetHeight;\n            const largestHeight = window.innerHeight - elementHeight - this.heightOffset;\n\n            const elementWidth = this.useScrollWidth ? element.scrollWidth : element.offsetWidth;\n            const largestWidth = window.innerWidth - elementWidth - this.widthOffset;\n\n            if (top > largestHeight) {\n                top = largestHeight;\n            }\n\n            if (left > largestWidth) {\n                left = largestWidth;\n            }\n\n            return [top, left];\n        },\n\n        removeScrollEventListener() {\n            eventOff(window, 'scroll', this.close);\n        },\n\n        removeHoverEventListener(element) {\n            element.querySelectorAll('.v-context__sub').forEach(\n                (subMenuNode) => {\n                    eventOff(subMenuNode, 'mouseenter', this.openSubMenu);\n                    eventOff(subMenuNode, 'mouseleave', this.closeSubMenu);\n                }\n            );\n        },\n\n        resetData() {\n            this.top = null;\n            this.left = null;\n            this.data = null;\n            this.show = false;\n        },\n\n        setItemRoles() {\n            // Add role=\"menuitem\" and tabindex=\"-1\" to all items\n            selectAll(this.localItemSelector, this.$el)\n                .forEach(el => {\n                    setAttr(el, 'role', 'menuitem');\n                    setAttr(el, 'tabindex', '-1');\n                });\n        }\n    },\n\n    watch: {\n        closeOnScroll(newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n\n            if (newValue && this.show) {\n                this.addScrollEventListener();\n            } else {\n                this.removeScrollEventListener();\n            }\n        },\n\n        itemSelector(selector, oldValue) {\n            if (selector !== oldValue) {\n                this.localItemSelector = this.mapItemSelector(selector);\n            }\n        }\n    },\n\n    render(h) {\n        if (this.lazy && ! this.show) {\n            return h(false);\n        }\n\n        // Only register the events we need\n        const on = {\n            // `!` modifier for capture\n            '!contextmenu': e => {\n                e.preventDefault();\n            },\n            keydown: this.onKeydown // up, down, esc\n        };\n\n        if (this.closeOnClick) {\n            on.click = this.onClick;\n        }\n\n        // Only register the directives we need\n        const directives = [\n            {\n                name: 'on-clickaway',\n                value: this.close,\n                rawName: 'v-on-clickaway'\n            }\n        ];\n\n        if (! this.lazy) {\n            directives.push({\n                name: 'show',\n                value: this.show,\n                rawName: 'v-show',\n                expression: 'show'\n            });\n        }\n\n        return h(\n            this.tag,\n            {\n                staticClass: 'v-context',\n                style: this.style,\n                attrs: {\n                    tabindex: '-1',\n                    role: this.role,\n                    'aria-hidden': this.lazy ? null : String(! this.show)\n                },\n                on,\n                directives\n            },\n            [normalizeSlot('default', { data: this.data }, this.$scopedSlots, this.$slots)]\n        );\n    }\n};\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=cdca7086\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"18d26c5a\"\n  \n)\n\nexport default component.exports"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA,ixZA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AKXA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}